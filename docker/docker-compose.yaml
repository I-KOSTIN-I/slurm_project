services:
  backend:
    build:
      context: ./backend-service
    env_file:
      - ./backend-service/.env
    environment:
      POSTGRES_HOST: postgres
      REDIS_ADDR: redis:6379
    ports:
      - "8080:8080"
    networks:
      - app-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

  frontend:
    build:
      context: ./frontend-service
    ports:
      - "3000:3000"
    env_file:
      - ./frontend-service/.env
    depends_on:
      - backend
    networks:
      - app-network

  postgres:
    image: postgres:16-alpine
    ports:
      - "5432:5432"
    volumes:
      - pg_data:/var/lib/postgresql/data
    env_file:
      - ./backend-service/.env
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  redis:
    image: redis:7
    ports:
      - "6379:6379"
    command: redis-server --requirepass ${REDIS_PASSWORD:-""}
    env_file:
      - ./backend-service/.env
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD:-}", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - app-network

volumes:
  pg_data:

networks:
  app-network:
    driver: bridge
